const axios = require('axios');

class JiraService {
  constructor(baseUrl, email, apiToken) {
    this.baseUrl = baseUrl;
    this.email = email;
    this.apiToken = apiToken;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Basic —Ç–æ–∫–µ–Ω –∏–∑ email:apiToken
    this.basicAuthToken = Buffer.from(`${email}:${apiToken}`).toString(
      'base64'
    );

    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ JiraService:', {
      baseUrl: this.baseUrl,
      email: this.email,
      apiTokenLength: this.apiToken ? this.apiToken.length : 0,
      basicAuthToken: this.basicAuthToken ? this.basicAuthToken : 0,
      hasBaseUrl: !!this.baseUrl,
      hasEmail: !!this.email,
      hasApiToken: !!this.apiToken,
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ –∫–ª—é—á—É
  async getIssue(issueKey) {
    try {
      const url = `${this.baseUrl}/rest/api/2/issue/${issueKey}`;
      console.log('üîç Jira API v2 –∑–∞–ø—Ä–æ—Å:', {
        url,
        issueKey,
        baseUrl: this.baseUrl,
        email: this.email,
        apiTokenLength: this.apiToken ? this.apiToken.length : 0,
        email: this.email,
        apiTokenLength: this.apiToken ? this.apiToken.length : 0,
        basicAuthToken: this.basicAuthToken ? this.basicAuthToken : 0,
      });

      const response = await axios.get(url, {
        headers: {
          Authorization: `Basic ${this.basicAuthToken}`,
        },
        params: {
          expand: 'changelog,transitions,subtasks',
          fields:
            'summary,description,issuetype,status,assignee,reporter,project,created,updated,priority,labels,components,fixVersions,parent,subtasks,timetracking,issuelinks',
        },
      });

      console.log('‚úÖ Jira API –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω:', {
        issueKey,
        status: response.status,
        dataKeys: Object.keys(response.data || {}),
        fieldsKeys: Object.keys(response.data?.fields || {}),
        issueType: response.data?.fields?.issuetype?.name,
        hasSubtasks: !!response.data?.fields?.subtasks,
        subtasksCount: response.data?.fields?.subtasks?.length || 0,
        hasParent: !!response.data?.fields?.parent,
        parentKey: response.data?.fields?.parent?.key,
      });

      return this.formatIssue(response.data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ Jira:', {
        issueKey,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url,
        email: this.email,
        apiTokenLength: this.apiToken ? this.apiToken.length : 0,
        basicAuthToken: this.basicAuthToken ? this.basicAuthToken : 0,
      });

      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É ${issueKey}: ${
          error.response?.data?.errorMessages?.[0] || error.message
        }`
      );
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–ª–∏ —ç–ø–∏–∫–∞
  async getIssuesFromPortfolio(issueKey) {
    try {
      const jql = `"Epic Link" = ${issueKey} OR parent = ${issueKey}`;
      const response = await axios.get(`${this.baseUrl}/rest/api/2/search`, {
        headers: {
          Authorization: `Basic ${this.basicAuthToken}`,
        },
        params: {
          jql: jql,
          maxResults: 100,
          fields:
            'summary,description,issuetype,status,assignee,reporter,project,created,updated,priority,labels,components,fixVersions,parent,subtasks,timetracking,issuelinks',
        },
      });

      return response.data.issues.map((issue) => this.formatIssue(issue));
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è:',
        error.response?.data || error.message
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è ${issueKey}: ${
          error.response?.data?.errorMessages?.[0] || error.message
        }`
      );
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è feature/story
  async getRelatedIssues(issueKey, issueType) {
    try {
      let jql = '';

      // –î–ª—è feature/story –∏—â–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –Ω–∏—Ö –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –∏—Ö –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
      if (issueType === 'Story' || issueType === 'New Feature') {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        // –ò—â–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏, –∑–∞–¥–∞—á–∏ –≤ —ç–ø–∏–∫–µ, –∑–∞–¥–∞—á–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ story, –∏ –∑–∞–¥–∞—á–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–≤—è–∑—å—é
        jql = `(parent = ${issueKey} OR "Epic Link" = ${issueKey} OR "Story Link" = ${issueKey} OR "Parent Link" = ${issueKey} OR "Feature Link" = ${issueKey} OR issue in linkedIssues(${issueKey}, "is included in"))`;
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
        jql = `parent = ${issueKey} OR "Epic Link" = ${issueKey}`;
      }

      console.log('üîç –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', {
        issueKey,
        issueType,
        jql,
      });

      let response;
      let relatedIssues = [];

      try {
        response = await axios.get(`${this.baseUrl}/rest/api/2/search`, {
          headers: {
            Authorization: `Basic ${this.basicAuthToken}`,
          },
          params: {
            jql: jql,
            maxResults: 100,
            fields:
              'summary,description,issuetype,status,assignee,reporter,project,created,updated,priority,labels,components,fixVersions,parent,subtasks,timetracking,issuelinks',
          },
        });

        relatedIssues = response.data.issues.map((issue) =>
          this.formatIssue(issue)
        );
      } catch (jqlError) {
        console.log('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π JQL –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π:', {
          issueKey,
          originalJql: jql,
          error: jqlError.response?.data || jqlError.message,
        });

        // –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        const simpleJql = `parent = ${issueKey}`;
        response = await axios.get(`${this.baseUrl}/rest/api/2/search`, {
          headers: {
            Authorization: `Basic ${this.basicAuthToken}`,
          },
          params: {
            jql: simpleJql,
            maxResults: 100,
            fields:
              'summary,description,issuetype,status,assignee,reporter,project,created,updated,priority,labels,components,fixVersions,parent,subtasks,timetracking,issuelinks',
          },
        });

        relatedIssues = response.data.issues.map((issue) =>
          this.formatIssue(issue)
        );
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ issuelinks
      const linkedIssues = await this.getLinkedIssues(issueKey);
      relatedIssues = [...relatedIssues, ...linkedIssues];

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueIssues = relatedIssues.filter(
        (issue, index, self) =>
          index === self.findIndex((t) => t.jiraKey === issue.jiraKey)
      );

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', {
        issueKey,
        issueType,
        count: uniqueIssues.length,
        jqlCount: relatedIssues.length - linkedIssues.length,
        linkedCount: linkedIssues.length,
        issues: uniqueIssues.map((issue) => ({
          key: issue.jiraKey,
          type: issue.issueType,
          title: issue.title,
        })),
      });

      return uniqueIssues;
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:',
        error.response?.data || error.message
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è ${issueKey}: ${
          error.response?.data?.errorMessages?.[0] || error.message
        }`
      );
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ issuelinks
  async getLinkedIssues(issueKey) {
    try {
      console.log('üîó –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ issuelinks:', { issueKey });

      // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É —Å issuelinks
      const mainIssue = await this.getIssue(issueKey);

      if (!mainIssue.issueLinks || mainIssue.issueLinks.length === 0) {
        console.log('‚ÑπÔ∏è –£ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ issuelinks');
        return [];
      }

      console.log('üîó –ù–∞–π–¥–µ–Ω—ã issuelinks:', {
        issueKey,
        linksCount: mainIssue.issueLinks.length,
        links: mainIssue.issueLinks.map((link) => ({
          type: link.type?.name,
          outwardIssue: link.outwardIssue?.key,
          inwardIssue: link.inwardIssue?.key,
        })),
      });

      // –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
      const linkedIssueKeys = [];

      mainIssue.issueLinks.forEach((link) => {
        if (link.outwardIssue?.key && link.outwardIssue.key !== issueKey) {
          linkedIssueKeys.push(link.outwardIssue.key);
        }
        if (link.inwardIssue?.key && link.inwardIssue.key !== issueKey) {
          linkedIssueKeys.push(link.inwardIssue.key);
        }
      });

      if (linkedIssueKeys.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ issuelinks');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
      const jql = `key in (${linkedIssueKeys.join(', ')})`;
      const response = await axios.get(`${this.baseUrl}/rest/api/2/search`, {
        headers: {
          Authorization: `Basic ${this.basicAuthToken}`,
        },
        params: {
          jql: jql,
          maxResults: 100,
          fields:
            'summary,description,issuetype,status,assignee,reporter,project,created,updated,priority,labels,components,fixVersions,parent,subtasks,timetracking,issuelinks',
        },
      });

      const linkedIssues = response.data.issues.map((issue) =>
        this.formatIssue(issue)
      );

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ issuelinks:', {
        issueKey,
        count: linkedIssues.length,
        issues: linkedIssues.map((issue) => ({
          key: issue.jiraKey,
          type: issue.issueType,
          title: issue.title,
        })),
      });

      return linkedIssues;
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ issuelinks:',
        error
      );
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserIssues(username, maxResults = 50) {
    try {
      const jql = `assignee = "${username}" ORDER BY created DESC`;
      const response = await axios.get(`${this.baseUrl}/rest/api/2/search`, {
        headers: {
          Authorization: `Basic ${this.basicAuthToken}`,
        },
        params: {
          jql: jql,
          maxResults: maxResults,
          fields:
            'summary,description,issuetype,status,assignee,reporter,project,created,updated,priority,labels,components,fixVersions,parent,subtasks,timetracking,changelog',
        },
      });

      return response.data.issues.map((issue) => this.formatIssue(issue));
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        error.response?.data || error.message
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}: ${
          error.response?.data?.errorMessages?.[0] || error.message
        }`
      );
    }
  }

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
  mapIssueType(issueTypeName) {
    const typeMapping = {
      –ó–∞–¥–∞—á–∞: 'Task',
      Story: 'Story',
      Task: 'Task',
      Bug: 'Bug',
      Epic: 'Epic',
      Portfolio: 'Portfolio',
      –ü–æ–¥–∑–∞–¥–∞—á–∞: 'Subtask',
      Subtask: 'Subtask',
      Improvement: 'Improvement',
      'New Feature': 'New Feature',
      '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è': 'New Feature',
    };

    const mappedType = typeMapping[issueTypeName] || issueTypeName || 'Task';

    if (issueTypeName && issueTypeName !== mappedType) {
      console.log('üîÑ –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:', {
        original: issueTypeName,
        mapped: mappedType,
      });
    }

    return mappedType;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
  formatIssue(issue) {
    const fields = issue.fields;

    return {
      jiraKey: issue.key,
      jiraId: issue.id,
      title: fields.summary || '',
      description: fields.description || '',
      issueType: this.mapIssueType(fields.issuetype?.name),
      status: fields.status?.name || 'Open',
      priority: fields.priority?.name || 'Medium',
      assignee:
        fields.assignee?.displayName || fields.assignee?.name || 'Unassigned',
      reporter:
        fields.reporter?.displayName || fields.reporter?.name || 'Unknown',
      projectKey: fields.project?.key || '',
      projectName: fields.project?.name || '',
      project: {
        key: fields.project?.key || '',
        name: fields.project?.name || '',
      },
      created: new Date(fields.created),
      updated: new Date(fields.updated),
      labels: fields.labels || [],
      components: fields.components?.map((c) => c.name) || [],
      fixVersions: fields.fixVersions?.map((v) => v.name) || [],
      parentKey: fields.parent?.key || null,
      subtasks: fields.subtasks?.map((st) => st.key) || [],
      originalEstimate: fields.timetracking?.originalEstimateSeconds || null,
      timeSpent: fields.timetracking?.timeSpentSeconds || null,
      issueLinks: fields.issuelinks || [],
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ changelog
      ...this.extractTimestamps(issue.changelog),
    };
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  extractTimestamps(changelog) {
    if (!changelog?.histories) {
      return { started: null, completed: null };
    }

    let started = null;
    let completed = null;

    for (const history of changelog.histories) {
      for (const item of history.items) {
        if (item.field === 'status') {
          const fromStatus = item.fromString?.toLowerCase();
          const toStatus = item.toString?.toLowerCase();

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
          if (
            fromStatus === 'to do' &&
            (toStatus === 'in progress' || toStatus === 'in development')
          ) {
            started = new Date(history.created);
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
          if (
            (fromStatus === 'in progress' ||
              fromStatus === 'in development' ||
              fromStatus === 'code review') &&
            (toStatus === 'done' ||
              toStatus === 'closed' ||
              toStatus === 'resolved')
          ) {
            completed = new Date(history.created);
          }
        }
      }
    }

    return { started, completed };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Jira
  async testConnection() {
    try {
      const url = `${this.baseUrl}/rest/api/2/myself`;
      console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira API v2:', {
        url,
        baseUrl: this.baseUrl,
        email: this.email,
        apiTokenLength: this.apiToken ? this.apiToken.length : 0,
        email: this.email,
        apiTokenLength: this.apiToken ? this.apiToken.length : 0,
        basicAuthToken: this.basicAuthToken ? this.basicAuthToken : 0,
      });

      const response = await axios.get(url, {
        headers: {
          Authorization: `Basic ${this.basicAuthToken}`,
        },
      });

      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira —É—Å–ø–µ—à–Ω–æ:', {
        status: response.status,
        user: response.data?.displayName || response.data?.name,
      });

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url,
        email: this.email,
        apiTokenLength: this.apiToken ? this.apiToken.length : 0,
        basicAuthToken: this.basicAuthToken ? this.basicAuthToken : 0,
      });
      return false;
    }
  }
}

module.exports = JiraService;
