const axios = require('axios');

class AIService {
  constructor(
    apiKey = process.env.AI_API_KEY,
    model = process.env.AI_MODEL || 'gpt-3.5-turbo',
    host = process.env.AI_HOST || 'https://api.openai.com/v1'
  ) {
    this.apiKey = apiKey;
    this.model = model;
    this.baseUrl = host;

    console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ AIService:', {
      model: this.model,
      baseUrl: this.baseUrl,
      apiKeyLength: this.apiKey ? this.apiKey.length : 0,
      hasApiKey: !!this.apiKey,
    });
  }

  // –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  async estimateTaskTime(task, similarTasks = [], relatedTasks = []) {
    try {
      const prompt = this.buildEstimationPrompt(
        task,
        similarTasks,
        relatedTasks
      );

      console.log('ü§ñ AI –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –∑–∞–¥–∞—á–∏:', {
        taskKey: task.jiraKey,
        taskTitle: task.title,
        taskType: task.issueType,
        similarTasksCount: similarTasks.length,
        relatedTasksCount: relatedTasks.length,
        promptLength: prompt.length,
        model: this.model,
        apiKeyLength: this.apiKey ? this.apiKey.length : 0,
      });

      const requestData = {
        model: this.model,
        messages: [
          {
            role: 'system',
            content:
              '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–û. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —á–∞—Å–∞—Ö, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á–∞—Ö.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        temperature: 0.3,
        max_tokens: 1000,
      };

      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:', {
        url: `${this.baseUrl}/chat/completions`,
        model: requestData.model,
        messagesCount: requestData.messages.length,
        temperature: requestData.temperature,
        maxTokens: requestData.max_tokens,
      });

      const response = await axios.post(
        `${this.baseUrl}/chat/completions`,
        requestData,
        {
          headers: {
            Authorization: `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
        }
      );

      console.log('‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
        status: response.status,
        statusText: response.statusText,
        usage: response.data.usage,
        choicesCount: response.data.choices?.length || 0,
        finishReason: response.data.choices?.[0]?.finish_reason,
      });

      const content = response.data.choices[0].message.content;
      const parsedResult = this.parseEstimationResponse(content);

      console.log('ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞:', {
        estimate: parsedResult.estimate,
        confidence: parsedResult.confidence,
        reasoningLength: parsedResult.reasoning?.length || 0,
        rawResponseLength: parsedResult.rawResponse?.length || 0,
      });

      return parsedResult;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url,
        apiKeyLength: this.apiKey ? this.apiKey.length : 0,
      });
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞');
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
  buildEstimationPrompt(task, similarTasks, relatedTasks) {
    // –°–æ–∫—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
    const shortDescription = task.description
      ? task.description.substring(0, 500) +
        (task.description.length > 500 ? '...' : '')
      : '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

    let prompt = `–û—Ü–µ–Ω–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –≤ —á–∞—Å–∞—Ö:

–ó–ê–î–ê–ß–ê:
- –¢–∏–ø: ${task.issueType}
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${shortDescription}
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}
- –ü—Ä–æ–µ–∫—Ç: ${task.project.name}
- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${task.components.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
- –ú–µ—Ç–∫–∏: ${task.labels.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –¥–ª—è feature/story
    if (relatedTasks.length > 0) {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
      const maxRelatedTasks = 10;
      const limitedRelatedTasks = relatedTasks.slice(0, maxRelatedTasks);

      console.log('ü§ñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è AI:', {
        taskKey: task.jiraKey,
        relatedTasksCount: relatedTasks.length,
        limitedCount: limitedRelatedTasks.length,
        relatedTasks: limitedRelatedTasks.map((rt) => ({
          key: rt.jiraKey,
          type: rt.issueType,
          title: rt.title,
        })),
      });

      prompt += `\n\n–°–í–Ø–ó–ê–ù–ù–´–ï –ó–ê–î–ê–ß–ò (–≤–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç—É feature/story):`;

      if (relatedTasks.length > maxRelatedTasks) {
        prompt += `\n\n–í—Å–µ–≥–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${relatedTasks.length} (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ${maxRelatedTasks}):`;
      }

      limitedRelatedTasks.forEach((relatedTask, index) => {
        const actualTime = relatedTask.actualDuration;
        const timeSpent = relatedTask.timeSpent
          ? Math.round(relatedTask.timeSpent / 3600)
          : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        // –°–æ–∫—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
        const shortDescription = relatedTask.description
          ? relatedTask.description.substring(0, 200) +
            (relatedTask.description.length > 200 ? '...' : '')
          : '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

        prompt += `\n\n${index + 1}. ${relatedTask.jiraKey}: ${
          relatedTask.title
        }
- –¢–∏–ø: ${relatedTask.issueType}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${shortDescription}
- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${
          actualTime ? Math.round(actualTime) + ' —á–∞—Å–æ–≤' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }
- –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${timeSpent} —á–∞—Å–æ–≤
- –°—Ç–∞—Ç—É—Å: ${relatedTask.status}`;
      });

      prompt += `\n\n–í–ê–ñ–ù–û: –ü—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ (${task.jiraKey}) —É—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –æ–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–≤—Å–µ–≥–æ ${relatedTasks.length}). –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∏—Ö –∑–∞–¥–∞—á.`;
    } else {
      console.log('ü§ñ –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:', {
        taskKey: task.jiraKey,
        taskType: task.issueType,
      });
    }

    if (similarTasks.length > 0) {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á
      const maxSimilarTasks = 5;
      const limitedSimilarTasks = similarTasks.slice(0, maxSimilarTasks);

      prompt += `\n\n–ü–û–•–û–ñ–ò–ï –ó–ê–î–ê–ß–ò (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è):`;

      limitedSimilarTasks.forEach((similarTask, index) => {
        const actualTime = similarTask.actualDuration;
        const timeSpent = similarTask.timeSpent
          ? Math.round(similarTask.timeSpent / 3600)
          : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        prompt += `\n\n${index + 1}. ${similarTask.jiraKey}: ${
          similarTask.title
        }
- –¢–∏–ø: ${similarTask.issueType}
- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${
          actualTime ? Math.round(actualTime) + ' —á–∞—Å–æ–≤' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }
- –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${timeSpent} —á–∞—Å–æ–≤
- –°—Ç–∞—Ç—É—Å: ${similarTask.status}`;
      });
    }

    prompt += `\n\n–î–∞–π –æ—Ü–µ–Ω–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
–û–¶–ï–ù–ö–ê: [—á–∏—Å–ª–æ] —á–∞—Å–æ–≤
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100]%
–û–ë–û–°–ù–û–í–ê–ù–ò–ï: [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏, —É—á–∏—Ç—ã–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã]`;

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const promptSizeKB = Math.round(prompt.length / 1024);
    console.log('üìè –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI:', {
      taskKey: task.jiraKey,
      promptSizeKB,
      promptLength: prompt.length,
      relatedTasksCount: relatedTasks.length,
      similarTasksCount: similarTasks.length,
    });

    return prompt;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
  parseEstimationResponse(content) {
    try {
      const lines = content.split('\n');
      let estimate = null;
      let confidence = null;
      let reasoning = '';

      for (const line of lines) {
        if (line.startsWith('–û–¶–ï–ù–ö–ê:')) {
          const match = line.match(/(\d+(?:\.\d+)?)/);
          if (match) {
            estimate = parseFloat(match[1]);
          }
        } else if (line.startsWith('–£–í–ï–†–ï–ù–ù–û–°–¢–¨:')) {
          const match = line.match(/(\d+(?:\.\d+)?)/);
          if (match) {
            confidence = parseFloat(match[1]) / 100;
          }
        } else if (line.startsWith('–û–ë–û–°–ù–û–í–ê–ù–ò–ï:')) {
          reasoning = line.replace('–û–ë–û–°–ù–û–í–ê–ù–ò–ï:', '').trim();
        }
      }

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (estimate === null) {
        const estimateMatch = content.match(/(\d+(?:\.\d+)?)\s*—á–∞—Å/);
        if (estimateMatch) {
          estimate = parseFloat(estimateMatch[1]);
        }
      }

      if (confidence === null) {
        const confidenceMatch = content.match(/(\d+(?:\.\d+)?)%/);
        if (confidenceMatch) {
          confidence = parseFloat(confidenceMatch[1]) / 100;
        } else {
          confidence = 0.7; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
      }

      if (!reasoning) {
        reasoning =
          '–û—Ü–µ–Ω–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.';
      }

      return {
        estimate: estimate || 8, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        confidence: Math.min(Math.max(confidence, 0), 1),
        reasoning: reasoning,
        rawResponse: content,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI:', error);
      return {
        estimate: 8,
        confidence: 0.5,
        reasoning: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç AI —Å–µ—Ä–≤–∏—Å–∞.',
        rawResponse: content,
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI —Å–µ—Ä–≤–∏—Å–∞
  async testConnection() {
    try {
      const url = `${this.baseUrl}/models`;
      console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI:', {
        url,
        model: this.model,
        apiKeyLength: this.apiKey ? this.apiKey.length : 0,
      });

      const response = await axios.get(url, {
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
        },
      });

      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI —É—Å–ø–µ—à–Ω–æ:', {
        status: response.status,
        modelsCount: response.data?.data?.length || 0,
      });

      return response.status === 200;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        url: error.config?.url,
        apiKeyLength: this.apiKey ? this.apiKey.length : 0,
      });
      return false;
    }
  }
}

module.exports = AIService;
