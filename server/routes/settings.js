const express = require('express');
const User = require('../models/User');
const JiraService = require('../services/jiraService');
const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', require('../middleware/auth'), async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id);

    if (!user) {
      return res.status(404).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });
    }

    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      userId: user.id,
      jiraBaseUrl: user.jiraBaseUrl,
      jiraUsername: user.jiraUsername,
      jiraEmail: user.jiraEmail,
      jiraApiToken: user.jiraApiToken
        ? '***' + user.jiraApiToken.slice(-4)
        : 'NULL',
      aiHost: user.aiHost,
      aiToken: user.aiToken ? '***' + user.aiToken.slice(-4) : 'NULL',
    });

    res.json({
      jira: {
        baseUrl: user.jiraBaseUrl || '',
        username: user.jiraUsername || '',
        email: user.jiraEmail || '',
        apiToken: user.jiraApiToken || '',
      },
      ai: {
        host: user.aiHost || '',
        token: user.aiToken || '',
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/', require('../middleware/auth'), async (req, res) => {
  try {
    const { jira, ai } = req.body;
    const userId = req.user.id;

    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', {
      userId,
      jira: jira
        ? {
            ...jira,
            apiToken: jira.apiToken
              ? '***' + jira.apiToken.slice(-4)
              : undefined,
          }
        : null,
      ai: ai
        ? { ...ai, token: ai.token ? '***' + ai.token.slice(-4) : undefined }
        : null,
    });

    const updateData = {};

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Jira
    if (jira) {
      if (jira.baseUrl !== undefined) updateData.jiraBaseUrl = jira.baseUrl;
      if (jira.username !== undefined) updateData.jiraUsername = jira.username;
      if (jira.email !== undefined) updateData.jiraEmail = jira.email;
      if (jira.apiToken !== undefined) {
        // –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –≤ –º–æ–¥–µ–ª–∏ User –≤ —Ö—É–∫–µ beforeUpdate
        updateData.jiraApiToken = jira.apiToken || null;
        console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ jiraApiToken –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥–µ–ª–∏:', {
          userId,
          apiTokenLength: jira.apiToken ? jira.apiToken.length : 0,
          apiTokenValue: jira.apiToken
            ? '***' + jira.apiToken.slice(-4)
            : 'NULL',
          willBeNull: !jira.apiToken,
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
    if (ai) {
      if (ai.host !== undefined) updateData.aiHost = ai.host;
      if (ai.token !== undefined) {
        // –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –≤ –º–æ–¥–µ–ª–∏ User –≤ —Ö—É–∫–µ beforeUpdate
        updateData.aiToken = ai.token || null;
        console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ aiToken –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥–µ–ª–∏');
      }
    }

    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
      ...updateData,
      jiraApiToken: updateData.jiraApiToken
        ? '***' + updateData.jiraApiToken.slice(-4)
        : undefined,
      aiToken: updateData.aiToken
        ? '***' + updateData.aiToken.slice(-4)
        : undefined,
    });

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', {
      userId,
      updateDataKeys: Object.keys(updateData),
      jiraApiTokenInUpdate: 'jiraApiToken' in updateData,
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —Ö—É–∫–∏)
    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.assign(user, updateData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç —Ö—É–∫–∏ beforeUpdate)
    await user.save();

    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      userId,
      success: true,
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await User.findByPk(userId);

    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      userId: updatedUser.id,
      username: updatedUser.username,
      jiraApiToken: updatedUser.jiraApiToken
        ? '***' + updatedUser.jiraApiToken.slice(-4)
        : 'NULL',
      jiraApiTokenLength: updatedUser.jiraApiToken
        ? updatedUser.jiraApiToken.length
        : 0,
      hasJiraApiToken: !!updatedUser.jiraApiToken,
    });

    res.json({
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      user: {
        id: updatedUser.id,
        username: updatedUser.username,
        email: updatedUser.email,
        jiraUsername: updatedUser.jiraUsername,
        jiraBaseUrl: updatedUser.jiraBaseUrl,
        jiraEmail: updatedUser.jiraEmail,
        aiHost: updatedUser.aiHost,
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    });
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira
router.post('/test-jira', require('../middleware/auth'), async (req, res) => {
  try {
    const { baseUrl, email, apiToken } = req.body;

    if (!baseUrl || !email || !apiToken) {
      return res.status(400).json({
        connected: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL, email –∏ API —Ç–æ–∫–µ–Ω',
      });
    }

    const jiraService = new JiraService(baseUrl, email, apiToken);
    const isConnected = await jiraService.testConnection();

    res.json({
      connected: isConnected,
      message: isConnected
        ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Jira. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Jira:', error);
    res.status(500).json({
      connected: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira',
    });
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–∏—Å—É
router.post('/test-ai', require('../middleware/auth'), async (req, res) => {
  try {
    const { host, token } = req.body;

    if (!host || !token) {
      return res.status(400).json({
        connected: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Å—Ç –∏ —Ç–æ–∫–µ–Ω AI —Å–µ—Ä–≤–∏—Å–∞',
      });
    }

    // –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–∏—Å—É
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API AI —Å–µ—Ä–≤–∏—Å–∞
    const axios = require('axios');

    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI API
      const response = await axios.get(`${host}/models`, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      });

      res.json({
        connected: true,
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI —Å–µ—Ä–≤–∏—Å—É —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
      });
    } catch (apiError) {
      console.error(
        '–û—à–∏–±–∫–∞ API AI —Å–µ—Ä–≤–∏—Å–∞:',
        apiError.response?.data || apiError.message
      );

      res.json({
        connected: false,
        message:
          '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AI —Å–µ—Ä–≤–∏—Å—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ —Ç–æ–∫–µ–Ω.',
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI:', error);
    res.status(500).json({
      connected: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–∏—Å—É',
    });
  }
});

module.exports = router;
