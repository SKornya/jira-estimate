const express = require('express');
const { body, validationResult } = require('express-validator');
const JiraService = require('../services/jiraService');
const Task = require('../models/Task');
const auth = require('../middleware/auth');
const router = express.Router();

// –í–∞–ª–∏–¥–∞—Ü–∏—è URL –∑–∞–¥–∞—á–∏
const issueUrlValidation = [
  body('issueUrl')
    .isURL({ protocols: ['http', 'https'] })
    .withMessage('URL –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º HTTP/HTTPS URL')
    .custom((value) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç atlassian.net –∏–ª–∏ jira
      if (!value.includes('atlassian.net') && !value.includes('jira')) {
        throw new Error('URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Jira');
      }
      return true;
    }),
];

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –ø–æ —Å—Å—ã–ª–∫–µ
router.post('/fetch-issue', auth, issueUrlValidation, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors.array(),
      });
    }

    const { issueUrl } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Jira
    if (
      !req.user.jiraBaseUrl ||
      !req.user.jiraEmail ||
      !req.user.jiraApiToken
    ) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Jira –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        userId: req.user.id,
        username: req.user.username,
        hasBaseUrl: !!req.user.jiraBaseUrl,
        hasEmail: !!req.user.jiraEmail,
        hasApiToken: !!req.user.jiraApiToken,
      });
      return res.status(400).json({
        error:
          '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Jira. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
      });
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∑–∞–¥–∞—á–∏ –∏–∑ URL
    const issueKey = extractIssueKeyFromUrl(issueUrl);
    if (!issueKey) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∑–∞–¥–∞—á–∏:', { issueUrl });
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∑–∞–¥–∞—á–∏ Jira',
      });
    }

    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏:', {
      userId: req.user.id,
      username: req.user.username,
      issueKey,
      issueUrl,
      jiraBaseUrl: req.user.jiraBaseUrl,
      jiraEmail: req.user.jiraEmail,
      jiraApiTokenLength: req.user.jiraApiToken
        ? req.user.jiraApiToken.length
        : 0,
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Jira
    const jiraService = new JiraService(
      req.user.jiraBaseUrl,
      req.user.jiraEmail,
      req.user.jiraApiToken // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Basic —Ç–æ–∫–µ–Ω–∞
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    const mainIssue = await jiraService.getIssue(issueKey);

    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', {
      issueKey,
      issueType: mainIssue.issueType,
      title: mainIssue.title,
    });

    let subtasks = [];

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–ª–∏ —ç–ø–∏–∫, –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
    if (mainIssue.issueType === 'Portfolio' || mainIssue.issueType === 'Epic') {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á –¥–ª—è Portfolio/Epic');
      subtasks = await jiraService.getIssuesFromPortfolio(issueKey);
    }
    // –ï—Å–ª–∏ —ç—Ç–æ feature/story, –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    else if (
      mainIssue.issueType === 'Story' ||
      mainIssue.issueType === 'New Feature' ||
      mainIssue.issueType === 'Feature'
    ) {
      console.log('üîó –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è Story/New Feature');
      subtasks = await jiraService.getRelatedIssues(
        issueKey,
        mainIssue.issueType
      );
    } else {
      console.log('‚ÑπÔ∏è –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è');
    }

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', {
      issueKey,
      issueType: mainIssue.issueType,
      subtasksCount: subtasks.length,
      subtasks: subtasks.map((task) => ({
        key: task.jiraKey,
        type: task.issueType,
        title: task.title,
      })),
    });

    res.json({
      mainIssue,
      subtasks,
      message: `–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ ${issueKey}`,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ Jira',
    });
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/sync-user-tasks', auth, async (req, res) => {
  try {
    const { maxResults = 50 } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Jira
    if (
      !req.user.jiraBaseUrl ||
      !req.user.jiraEmail ||
      !req.user.jiraApiToken
    ) {
      return res.status(400).json({
        error:
          '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Jira. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
      });
    }

    const jiraService = new JiraService(
      req.user.jiraBaseUrl,
      req.user.jiraEmail,
      req.user.jiraApiToken // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Basic —Ç–æ–∫–µ–Ω–∞
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Jira
    const jiraIssues = await jiraService.getUserIssues(
      req.user.jiraUsername,
      maxResults
    );

    let syncedCount = 0;
    let errorCount = 0;
    const errors = [];

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for (const issue of jiraIssues) {
      try {
        const existingTask = await Task.findOne({ jiraKey: issue.jiraKey });

        if (existingTask) {
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
          Object.assign(existingTask, issue);
          existingTask.lastSynced = new Date();
          existingTask.syncStatus = 'synced';
          await existingTask.save();
        } else {
          // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
          const newTask = new Task({
            ...issue,
            assignee: req.user.jiraUsername,
            lastSynced: new Date(),
            syncStatus: 'synced',
          });
          await newTask.save();
        }

        syncedCount++;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ ${issue.jiraKey}:`, error);
        errorCount++;
        errors.push({
          jiraKey: issue.jiraKey,
          error: error.message,
        });
      }
    }

    res.json({
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`,
      syncedCount,
      errorCount,
      errors: errors.length > 0 ? errors : undefined,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      error: error.message || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á',
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira
router.get('/test-connection', auth, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Jira
    if (
      !req.user.jiraBaseUrl ||
      !req.user.jiraEmail ||
      !req.user.jiraApiToken
    ) {
      return res.status(400).json({
        error:
          '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Jira. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
      });
    }

    const jiraService = new JiraService(
      req.user.jiraBaseUrl,
      req.user.jiraEmail,
      req.user.jiraApiToken // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Basic —Ç–æ–∫–µ–Ω–∞
    );

    const isConnected = await jiraService.testConnection();

    res.json({
      connected: isConnected,
      message: isConnected
        ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira —É—Å–ø–µ—à–Ω–æ'
        : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Jira',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira',
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∑–∞–¥–∞—á–∏ –∏–∑ URL
function extractIssueKeyFromUrl(url) {
  try {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL:
    // https://domain.atlassian.net/browse/PROJECT-123
    // https://domain.atlassian.net/jira/software/projects/PROJECT/boards/1/backlog?selectedIssue=PROJECT-123
    // https://domain.atlassian.net/jira/core/projects/PROJECT/issues/PROJECT-123

    const patterns = [
      /\/browse\/([A-Z]+-\d+)/,
      /selectedIssue=([A-Z]+-\d+)/,
      /\/issues\/([A-Z]+-\d+)/,
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        return match[1];
      }
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∑–∞–¥–∞—á–∏:', error);
    return null;
  }
}

module.exports = router;
