const CryptoJS = require('crypto-js');
const crypto = require('crypto');

// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
if (!ENCRYPTION_KEY) {
  console.error(
    '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ENCRYPTION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!'
  );
  console.error(
    '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—å–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ENCRYPTION_KEY'
  );
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞
if (ENCRYPTION_KEY.length < 32) {
  console.error(
    '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ENCRYPTION_KEY –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞!'
  );
  process.exit(1);
}

/**
 * –®–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES-256-GCM
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function encrypt(text) {
  if (!text) return null;

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π IV –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipher('aes-256-gcm', ENCRYPTION_KEY);

    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');

    const authTag = cipher.getAuthTag();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º IV + authTag + encrypted data
    return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
    return null;
  }
}

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
 * @param {string} encryptedText - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 * @returns {string} - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function decrypt(encryptedText) {
  if (!encryptedText) return null;

  console.log('üîç DEBUG: –ù–∞—á–∞–ª–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', {
    encryptedText: encryptedText ? '***' + encryptedText.slice(-4) : 'NULL',
    length: encryptedText ? encryptedText.length : 0,
    hasColon: encryptedText ? encryptedText.includes(':') : false,
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç CryptoJS –∏–ª–∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if (encryptedText.includes(':')) {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: IV:authTag:encrypted
      const parts = encryptedText.split(':');
      console.log('üîç DEBUG: –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, —á–∞—Å—Ç–∏:', {
        partsCount: parts.length,
        partLengths: parts.map((p) => p.length),
      });

      if (parts.length !== 3) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      }

      const iv = Buffer.from(parts[0], 'hex');
      const authTag = Buffer.from(parts[1], 'hex');
      const encrypted = parts[2];

      console.log('üîç DEBUG: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', {
        ivLength: iv.length,
        authTagLength: authTag.length,
        encryptedLength: encrypted.length,
      });

      const decipher = crypto.createDecipher('aes-256-gcm', ENCRYPTION_KEY);
      decipher.setAuthTag(authTag);

      let decrypted = decipher.update(encrypted, 'hex', 'utf8');
      decrypted += decipher.final('utf8');

      console.log('üîç DEBUG: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞:', {
        decryptedLength: decrypted.length,
        decryptedValue: decrypted ? '***' + decrypted.slice(-4) : 'NULL',
      });

      return decrypted;
    } else {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç CryptoJS (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      try {
        const bytes = CryptoJS.AES.decrypt(encryptedText, ENCRYPTION_KEY);
        const decrypted = bytes.toString(CryptoJS.enc.Utf8);
        if (!decrypted) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
        }
        return decrypted;
      } catch (cryptoJSError) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ CryptoJS:', cryptoJSError);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∫ CryptoJS, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return encryptedText;
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
    return null;
  }
}

/**
 * –®–∏—Ñ—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
 */
function encryptUserTokens(user) {
  const encrypted = { ...user };

  if (user.jiraApiToken) {
    encrypted.jiraApiToken = encrypt(user.jiraApiToken);
  }

  if (user.aiToken) {
    encrypted.aiToken = encrypt(user.aiToken);
  }

  return encrypted;
}

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
 */
function decryptUserTokens(user) {
  const decrypted = { ...user };

  if (user.jiraApiToken) {
    decrypted.jiraApiToken = decrypt(user.jiraApiToken);
  }

  if (user.aiToken) {
    decrypted.aiToken = decrypt(user.aiToken);
  }

  return decrypted;
}

module.exports = {
  encrypt,
  decrypt,
  encryptUserTokens,
  decryptUserTokens,
};
