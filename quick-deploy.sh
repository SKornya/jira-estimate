#!/bin/bash

# –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Jira Estimate
# –ê–≤—Ç–æ—Ä: s.korniakov
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker
docker_quick_deploy() {
    log_info "üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [ ! -f .env ]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
        cat > .env << EOF
# Database Configuration
POSTGRES_DB=jira_estimate
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres123
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# Server Configuration
SERVER_PORT=3001
NODE_ENV=production
FRONTEND_URL=http://localhost:3000

# JWT Configuration
JWT_SECRET=$(openssl rand -base64 32 2>/dev/null || echo "jwt-secret-$(date +%s)")
JWT_EXPIRES_IN=24h

# Jira Configuration (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
JIRA_BASE_URL=
JIRA_USERNAME=
JIRA_API_TOKEN=

# AI Service Configuration (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
OPENAI_API_KEY=

# Frontend Configuration
FRONTEND_PORT=3000
EOF
        log_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    mkdir -p nginx/ssl
    if [ ! -f "nginx/ssl/cert.pem" ] || [ ! -f "nginx/ssl/private.key" ]; then
        ./scripts/generate-ssl.sh self-signed localhost
    fi
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_info "–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose up -d --build
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 15
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if curl -f http://localhost:3001/api/health &> /dev/null; then
        log_success "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!"
        echo
        log_info "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:"
        log_info "   - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç (—á–µ—Ä–µ–∑ nginx): http://localhost"
        log_info "   - HTTPS (—á–µ—Ä–µ–∑ nginx): https://localhost"
        log_info "   - –§—Ä–æ–Ω—Ç–µ–Ω–¥ (–Ω–∞–ø—Ä—è–º—É—é): http://localhost:3000"
        log_info "   - API (–Ω–∞–ø—Ä—è–º—É—é): http://localhost:3001"
        log_info "   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: localhost:5432"
        echo
        log_info "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        log_info "   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        log_info "   2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        log_info "   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Jira –∏ OpenAI API –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        echo
        log_info "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        log_info "   - –õ–æ–≥–∏: docker-compose logs -f"
        log_info "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
        log_info "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    else
        log_error "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
        exit 1
    fi
}

# –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–µ–∑ Docker
local_quick_deploy() {
    log_info "üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if ! command -v psql &> /dev/null; then
        log_error "PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if [ ! -f .env ]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env..."
        cat > .env << EOF
# Database Configuration
DATABASE_URL=postgresql://postgres:password@localhost:5432/jira_estimate
POSTGRES_DB=jira_estimate
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_HOST=localhost
POSTGRES_PORT=5432

# Server Configuration
PORT=3001
NODE_ENV=development
FRONTEND_URL=http://localhost:3000

# JWT Configuration
JWT_SECRET=$(openssl rand -base64 32 2>/dev/null || echo "jwt-secret-$(date +%s)")
JWT_EXPIRES_IN=24h

# Jira Configuration (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
JIRA_BASE_URL=
JIRA_USERNAME=
JIRA_API_TOKEN=

# AI Service Configuration (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
OPENAI_API_KEY=
EOF
        log_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    psql -U postgres -c "CREATE DATABASE jira_estimate;" 2>/dev/null || log_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
    cd client && npm install && cd ..
    
    # –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    log_info "–°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    cd client && npm run build && cd ..
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
    nohup npm start > server.log 2>&1 &
    SERVER_PID=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if curl -f http://localhost:3001/api/health &> /dev/null; then
        log_success "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!"
        echo
        log_info "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:"
        log_info "   - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç (—á–µ—Ä–µ–∑ nginx): http://localhost"
        log_info "   - HTTPS (—á–µ—Ä–µ–∑ nginx): https://localhost"
        log_info "   - –§—Ä–æ–Ω—Ç–µ–Ω–¥ (–Ω–∞–ø—Ä—è–º—É—é): http://localhost:3000"
        log_info "   - API (–Ω–∞–ø—Ä—è–º—É—é): http://localhost:3001"
        log_info "   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: localhost:5432"
        echo
        log_info "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        log_info "   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        log_info "   2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        log_info "   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Jira –∏ OpenAI API –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        echo
        log_info "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        log_info "   - –õ–æ–≥–∏: tail -f server.log"
        log_info "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: kill $SERVER_PID"
        log_info "   - PID —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_PID"
    else
        log_error "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: cat server.log"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Jira Estimate"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏—è]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  docker     - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo "  local      - –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "  auto       - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞"
    echo "  help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 docker    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker"
    echo "  $0 local     # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "  $0 auto      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä"
    echo ""
    echo "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:"
    echo "  Docker: Docker + Docker Compose"
    echo "  Local:  Node.js 16+ + PostgreSQL 12+"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-auto}" in
    "docker")
        if check_docker; then
            docker_quick_deploy
        else
            log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            exit 1
        fi
        ;;
    "local")
        local_quick_deploy
        ;;
    "auto")
        if check_docker; then
            log_info "Docker –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
            docker_quick_deploy
        else
            log_info "Docker –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
            local_quick_deploy
        fi
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
        show_help
        exit 1
        ;;
esac
